manipulate(myHist(mu), mu = slider(62, 74, step=0.5))
manipulate(myHist(mu), mu = slider(62, 74, step=0.5))
manipulate
mu = slider(62, 74, step=0.5)
manipulate(myHist(mu), mu = slider(62, 74, step=0.5))
library(manipulate)
library(UsingR)
data(galton)
myHist <- function(mu) {
mse <- mean((galton$child - mu)^2)
g <- ggplot(galton, aes(x=child)) + geom_histogram(fill = "salmon", colour = "black", binwidth=1)
g <- g  + geom_vline(xintercept = mu, size = 3)
g <- g+ ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step=0.5))
rep(c(0,1))
rep(c(0,1),c(100/2,100/2))
install.packages("MikTex")
install.packages("MiKTeX")
data(mtcars)
options(contrasts=c("contr.sum", "contr.poly"))
aov.1 <- aov(mpg ~ ., data=mtcars)
print(aov.1)
aov.1
c <- cor(mtcars)
c[upper.tri(c)] <- NA
c
pairs(mpg ~ ., data=mtcars)
data(mtcars)
options(contrasts=c("contr.sum", "contr.poly"))
aov.1 <- aov(mpg ~ ., data=mtcars)
library(xtable)
print(xtable(aov.1), type="html")
install.packages("xtable")
data(mtcars)
options(contrasts=c("contr.sum", "contr.poly"))
aov.1 <- aov(mpg ~ ., data=mtcars)
library(xtable)
print(xtable(aov.1), type="html")
str(mtcars)
?mtcars
data(mtcars)
options(contrasts=c("contr.sum", "contr.poly"))
aov.1 <- aov(mpg ~ ., data=mtcars)
library(xtable)
print(xtable(aov.1), type="html")
data(mtcars)
fit3 <- lm(mpg ~ cyl + wt, data = mtcars)
fit7 <- lm(mpg ~ am, data = mtcars)
fit8 <- lm(mpg ~ cyl + wt + am, data=mtcars)
print(xtable(fit3), type="html")
library(xtable)
print(xtable(fit3), type="html")
install.packages("MiKTeX")
?mtcars
library(mass)
?shuttle
library(MASS)
?shuttle
head(shuttle)
shuttle$wind
factor(shuttle$wind)
data(shutle)
data(shuttle)
str(shuttle)
shuttle$use == 'auto'
shuttle$useNum[shuttle$use == 'auto']
shuttle$useNum[shuttle$use == 'auto'] <- 1
shuttle$useNum
str(shuttle)
shuttle$useNum[shuttle$use == 'noauto'] <- 0
shuttle$useNum
shuttle$wind
factor(shuttle$wind)
shuttle$windFactor <- factor(shuttle$wind)
shuttle$windFactor
logAutoLander <- glm(shuttle$useNum ~ shuttle$windFactor, family='binomial')
summary(logAutoLander)
logAutoLander$coef[1]
logAutoLander$coef[2]
exp(windhead)/exp(windtail)
windhead <- logAutoLander$coef[1]
windtail <- logAutoLander$coef[2]
exp(windhead)/exp(windtail)
summary(logAutoLander)
exp(windhead)/exp(windtail)
exp(windtail)/exp(windhead)
exp(windtail)
exp(windhead)
exp(windtail)/exp(windhead)
library(MASS)
data(shuttle)
shuttle$use <- factor(shuttle$use, levels = c("auto", "noauto"), labels = c(1, 0))
fit1 <- glm(use ~ wind - 1, data = shuttle, family = "binomial")
summary(fit)
fit1 <- glm(use ~ wind - 1, data = shuttle, family = "binomial")
summary(fit1)
windhead <- fit1$coef[1]
windtail <- fit1$coef[2]
exp(windtail)/exp(windhead)
library(MASS)
data(shuttle)
str(shuttle)
shuttle$useNum[shuttle$use == 'auto'] <- 1
shuttle$useNum[shuttle$use == 'noauto'] <- 0
shuttle$windFactor <- factor(shuttle$wind)
logAutoLander <- glm(shuttle$useNum ~ shuttle$windFactor -1, family='binomial')
summary(logAutoLander)
windhead <- logAutoLander$coef[1]
windtail <- logAutoLander$coef[2]
exp(windtail)/exp(windhead)
logAutoLander <- glm(shuttle$useNum ~ shuttle$wind -1, family='binomial')
summary(logAutoLander)
windhead <- logAutoLander$coef[1]
windtail <- logAutoLander$coef[2]
exp(windtail)/exp(windhead)
library(MASS)
data(shuttle)
str(shuttle)
shuttle$useNum[shuttle$use == 'auto'] <- 1
shuttle$useNum[shuttle$use == 'noauto'] <- 0
logAutoLander <- glm(shuttle$useNum ~ shuttle$wind - 1, family='binomial')
summary(logAutoLander)
library(MASS)
data(shuttle)
shuttle$use
shuttle$use <- factor(shuttle$use, levels = c("auto", "noauto"), labels = c(1, 0))
shuttle$use
fit1 <- glm(use ~ wind - 1, data = shuttle, family = "binomial")
summary(fit1)
library(MASS)
data(shuttle)
str(shuttle)
shuttle$useNum[shuttle$use == 'auto'] <- 1
shuttle$useNum[shuttle$use == 'noauto'] <- 0
shuttle$useNum
logAutoLander <- glm(shuttle$useNum ~ shuttle$wind - 1, family='binomial')
summary(logAutoLander)
logAutoLander <- glm(shuttle$useNum ~ shuttle$wind, family='binomial')
summary(logAutoLander)
shuttle$useNum <- factor(shuttle$use, levels = c("auto", "noauto"), labels = c(1, 0))
logAutoLander <- glm(shuttle$useNum ~ shuttle$wind - 1, family='binomial')
summary(logAutoLander)
windhead <- logAutoLander$coef[1]
windtail <- logAutoLander$coef[2]
exp(windtail)/exp(windhead)
str(shuttle)
exp(windhead)/exp(windtail)
(exp(windhead)/exp(windtail)) - 1
library(MASS)
data(shuttle)
# convert outcome to 0 = noauto, 1 = auto
shuttle$useNum <- factor(shuttle$use, levels = c("auto", "noauto"), labels = c(1, 0))
shuttle$windFactor <- factor(shuttle$wind)
shuttle$windMagnFactor <- factor(shuttle$magn)
logAutolander2 <- glm(shuttle$useNum ~ shuttle$windFactor + shuttle$windMagnFactor, family='binomial')
summary(logAutolander2)
exp(logAutolander2$coef)
library(MASS)
data(shuttle)
str(shuttle)
# convert outcome to 0 = noauto, 1 = auto
shuttle$useNum <- factor(shuttle$use, levels = c("auto", "noauto"), labels = c(1, 0))
shuttle$windFactor <- factor(shuttle$wind)
logAutoLander <- glm(shuttle$useNum ~ shuttle$wind, family='binomial')
summary(logAutoLander)
windhead <- logAutoLander$coef[1]
windtail <- logAutoLander$coef[2]
exp(windhead)/exp(windtail)
exp(windhead)/exp(windtail)
exp(windhead)
windhead
windtail
exp(logAutoLander$coeff)
expd(confint(logAutoLander))
exp(confint(logAutoLander))
exp(windtail)/exp(windhead)
windhead <- logAutoLander$coef[1]
windtail <- logAutoLander$coef[2]
exp(windtail)/exp(windhead)
exp(logAutoLander$coeff)
summary(logAutoLander)
library(MASS)
data(shuttle)
# convert outcome to 0 = noauto, 1 = auto
shuttle$use <- factor(shuttle$use, levels = c("auto", "noauto"), labels = c(1, 0))
fit1 <- glm(use ~ wind - 1, data = shuttle, family = "binomial")
summary(fit1)
windhead <- fit1$coef[1]
windtail <- fit1$coef[2]
exp(windtail)/exp(windhead)
library(MASS)
data(shuttle)
str(shuttle)
# convert outcome to 0 = noauto, 1 = auto
shuttle$useNum <- factor(shuttle$use, levels = c("auto", "noauto"), labels = c(1, 0))
shuttle$windFactor <- factor(shuttle$wind)
logAutoLander <- glm(shuttle$useNum ~ shuttle$wind, family='binomial')
summary(logAutoLander)
logAutoLander <- glm(shuttle$useNum ~ shuttle$wind - 1, family='binomial')
summary(logAutoLander)
windhead <- logAutoLander$coef[1]
windtail <- logAutoLander$coef[2]
exp(windtail)/exp(windhead)
exp(logAutoLander$coeff)
logAutoLander2 <- glm(shuttle$useNum ~ shuttle$wind, family='binomial')
exp(logAutoLander$coeff)
exp(logAutoLander2$coeff)
library(MASS)
data(shuttle)
str(shuttle)
# convert outcome to 0 = noauto, 1 = auto
shuttle$useNum <- factor(shuttle$use, levels = c("auto", "noauto"), labels = c(1, 0))
shuttle$windFactor <- factor(shuttle$wind)
logAutoLander <- glm(shuttle$useNum ~ shuttle$wind - 1, family='binomial')
summary(logAutoLander)
windhead <- logAutoLander$coef[1]
windtail <- logAutoLander$coef[2]
exp(windtail)/exp(windhead)
logAutoLander2 <- glm(shuttle$useNum ~ shuttle$wind, family='binomial')
exp(logAutoLander2$coeff)
library(MASS)
data(shuttle)
# convert outcome to 0 = noauto, 1 = auto
shuttle$useNum <- factor(shuttle$use, levels = c("auto", "noauto"), labels = c(1, 0))
shuttle$windFactor <- factor(shuttle$wind)
shuttle$windMagnFactor <- factor(shuttle$magn)
logAutolander <- glm(shuttle$useNum ~ shuttle$windFactor + shuttle$windMagnFactor, family='binomial')
summary(logAutolander)
exp(logAutoLander$coeff)
library(MASS)
data(shuttle)
# convert outcome to 0 = noauto, 1 = auto
shuttle$useNum <- factor(shuttle$use, levels = c("auto", "noauto"), labels = c(1, 0))
shuttle$windFactor <- factor(shuttle$wind)
shuttle$windMagnFactor <- factor(shuttle$magn)
logAutoLander <- glm(shuttle$useNum ~ shuttle$windFactor + shuttle$windMagnFactor, family='binomial')
summary(logAutoLander)
exp(logAutoLander$coeff)
library(MASS)
data(shuttle)
shuttle$use
shuttle$auto <- as.numeric(shuttle$use=="auto")
shuttle$auto
fit <- glm(auto ~ wind,  binomial,  shuttle)
fit3 <- glm(1-auto ~ wind,  binomial, shuttle)
fit$coefficients
fit3$coefficients
data(InsectSprays)
data(InsectSprays)
str(InsectSprays)
head(InsectSprays)
?InsectSprays
boxplot(count ~ spray, data = InsectSprays,
xlab = "Type of spray", ylab = "Insect count",
main = "InsectSprays data", varwidth = TRUE, col = "lightgray")
fm1 <- aov(count ~ spray, data = InsectSprays)
fit <- glm(count ~ spray  - 1, family = "poisson", data = InsectSprays)
exp(fit$coef[1])/exp(fit$coef[2])
data(mtcars)
fit1 <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary(fit1)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots<-c(0)
splineTerms<-sapply(knots, function(knot)(x > knot)*(x - knot))
xMat<-cbind(1,x,splineTerms)
linearModel <- lm(y~xMat-1)
yhat<-predict(linearModel)
plot(x,y,frame=FALSE,pch=21,bg="lightblue",cex=2)
lines(x,yhat,col="red",lwd=2)
summary(linearModel)
linearModel$coeff[1]
linearModel$coeff[2]
library("swirl")
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
fit <- (child ~ parent, galton)
fit <- (child ~ parent)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slop <- fit$coef[2]
ols.slope <- fit$coef[2]
rhs - lhs
lhs-rhs
all.equal(lhs,rhs)
varchild ,_ var(galton$child)
varchild <_ var(galton$child)
varchild <- var(galton$child)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- est()
varEst <- est(ols.ic,ols.slope)
varEst <- var(est(ols.slope,ols.ic))
all.equal(varChild,varRes,varEst)
all.equal(varChild,varRes+varEst)
efit <- lm(accel ~mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals,attenu$mag)
cov(efit$residuals,attenu$dist)
cor(gpa_nor,gch_nor)
l_nor <- lm(gpa_nor ~ gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
fit <- lm(child ~ parent, galton)
sum(fit$residuals) / n-2
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum(sqrt((galton$child-mu)^2))
sTot <- sum((galton$child-mu)^2)
sRes <-
ddd
sRes <- deviance(galton$child)
sRes <- deviance(child)
fit$residuals
sRes <- deviance(fit)
1 - sRes/sTot
summary(fot$r.squared)
summary(fit$r.squared)
summary(fit)$r.squared
cor(galton$child,galton$parent)
cor(galton$parent,galton$child)^2
ones <- reo(1, nrow(galton))
ones <- rep(1, nrow(galton))
lm(child-ones + parent-1, galton)
lm(child~ones + parent~1, galton)
lm(child ~ ones + parent - 1, galton)
lm(child~parent, galton)
lm(child~1,galton)
View(trees)
fit <- lm(Volume ~Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth",trees)
View(trees2)
fit2 <- lm(Volume ~ Height + Constant - 1,trees2)
lapply(list(fit,fit2),coef)
lm(Fertility ~.,swiss)
all <- lm(Fertility ~.,swiss)
summary(all)
summary(lm(Fertility~Agriculture, swiss))
cor(swiss$Examination,swiss$Education)
cor(swiss$Agriculture,swiss$Education)
makelms()
ec <- swiss$Examination + swiss$Catholic
efit <- lm(Fertility ~ . + ec, swiss)
efit$coef - fit$coef
all$coefficients - efit$coefficients
6
dim(InsectSprays)
head(InsectSpraus)
head(InsectSprays)
head(InsectSprays,15)
sA
InsectSprays[,2]
summary(InsectSprays[,2])
sapply(InsectSprays)
sapply(InsectSprays,"")
sapply(class, InsectSprays)
sapply(InsectSprays, class)
fit <- lm(count ~ spray)
fit <- lm(count ~ spray, InsectSprays)
fit$coef
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nFit <- lm(Count ~ Spray - 1, InsectSprays)
nFit <- lm(count ~ spray - 1, InsectSprays)
nFit <- lm(count ~ spray - 1, InsectSprays)
nfit <- lm(count ~ spray - 1, InsectSprays)
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray, "C")
fit2 <- lm(count ~ spray, spray2)
fit2 <- lm(count ~ spray, InsectSprays)
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
fit$coef[2] - fit$coef[3] / 1.6011
( fit$coef[2] - fit$coef[3] ) / 1.6011
dim(hunger)
948
names(hunger)
fit <- lm(Numeric ~ Year, hunger)
summary(fit)$coef
lmF <- lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"], hunger)
lmM <- lm(Numeric[Sex=="Male"] ~ Year[Sex=="Male"], hunger)
lmBoth <- lm(Numeric ~ Year + Sex, hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Year*Sex, hunger)
summary(lmInter)
dataset <- read.table("household_power_consumption.txt", sep=";", header = TRUE)
setwd("~/Carolina/R/coursera/ExData_Plotting1")
dataset <- read.table("household_power_consumption.txt", sep=";", header = TRUE)
dateTime <- paste(dataset$Date, dataset$Time)
dataset$Date <- as.Date(dataset$Date, "%d/%m/%Y")
dataset$DateTime <- strptime(dateTime, format="%d/%m/%Y %H:%M:%S")
str(dataset)
datePeriod <-as.Date(c('01/02/2007','02/02/2007'), "%d/%m/%Y")
datePeriod
dataset <- dataset[dataset$Date %in% datePeriod ,]
dataset$Global_active_power <- as.numeric(as.character(dataset$Global_active_power))
hist(dataset$Global_active_power, xlab="Global Active Power (kilowatts)", col="red", main="Global Active Power")
dev.copy(png, file="plot1.png")
dev.off()
with(dataset, plot(DateTime, Global_active_power, pch=19, type="n", xlab="", ylab="Global Active Power (kilowatts)"))
with(dataset, lines(DateTime, Global_active_power))
dev.copy(png, file="plot2.png")
dev.off()
with(dataset, plot(DateTime, Sub_metering_1, type="n", xlab="", ylab="Energy sub metering"))
with(dataset, lines(DateTime, Sub_metering_1, col="grey"))
with(dataset, lines(DateTime, Sub_metering_2, col="red"))
with(dataset, lines(DateTime, Sub_metering_3, col="blue"))
legend("topright", lwd=2, col=c("grey", "red", "blue"), legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.copy(png, file="plot2.png")
dev.off()
dev.copy(png, file="plot3.png")
dev.off()
with(dataset, plot(DateTime, Global_active_power, pch=19, type="n", xlab="", ylab="Global Active Power (kilowatts)"))
with(dataset, lines(DateTime, Global_active_power))
dev.copy(png, file="plot2.png")
dev.off()
dataset$Global_reactive_power <- as.numeric(as.character(dataset$Global_reactive_power))
dataset$Voltage <- as.numeric(as.character(dataset$Voltage))
par(mfrow=c(2,2))
with(dataset, {
plot(DateTime, Global_active_power, type="n", ylab="Global Active Power")
lines(DateTime, Global_active_power)
plot(DateTime, Voltage, type="n", xlab="datetime")
lines(DateTime, Voltage)
plot(DateTime, Sub_metering_1, type="n", ylab="Energy sub metering")
lines(DateTime, Sub_metering_1, col="grey")
lines(DateTime, Sub_metering_2, col="red")
lines(DateTime, Sub_metering_3, col="blue")
legend(bty = "n", cex = 0.65, "topright", lwd="2", col=c("grey","red","blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
plot(DateTime, Global_reactive_power, type="n", xlab="datetime")
lines(DateTime, Global_reactive_power)
})
dev.copy(png, file="plot4.png")
dev.off()
par(mfrow=c(2,2))
with(dataset, {
plot(DateTime, Global_active_power, type="n", xlab="", ylab="Global Active Power")
lines(DateTime, Global_active_power)
plot(DateTime, Voltage, type="n", xlab="datetime")
lines(DateTime, Voltage)
plot(DateTime, Sub_metering_1, type="n", xlab="", ylab="Energy sub metering")
lines(DateTime, Sub_metering_1, col="grey")
lines(DateTime, Sub_metering_2, col="red")
lines(DateTime, Sub_metering_3, col="blue")
legend(bty = "n", cex = 0.65, "topright", lwd="2", col=c("grey","red","blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
plot(DateTime, Global_reactive_power, type="n", xlab="datetime")
lines(DateTime, Global_reactive_power)
})
dev.copy(png, file="plot4.png")
dev.off()
par(mfrow=c(2,2))
with(dataset, {
plot(DateTime, Global_active_power, type="n", xlab="", ylab="Global Active Power")
lines(DateTime, Global_active_power)
plot(DateTime, Voltage, type="n", xlab="datetime")
lines(DateTime, Voltage)
plot(DateTime, Sub_metering_1, type="n", xlab="", ylab="Energy sub metering", ylim=c(0, 30))
lines(DateTime, Sub_metering_1, col="grey")
lines(DateTime, Sub_metering_2, col="red")
lines(DateTime, Sub_metering_3, col="blue")
legend(bty = "n", cex = 0.65, "topright", lwd="2", col=c("grey","red","blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
plot(DateTime, Global_reactive_power, type="n", xlab="datetime", ylim=c(0.0,0.5))
lines(DateTime, Global_reactive_power)
})
dev.copy(png, file="plot4.png")
dev.off()
?dev.copy
par(mfrow=c(2,2))
with(dataset, {
plot(DateTime, Global_active_power, type="n", xlab="", ylab="Global Active Power")
lines(DateTime, Global_active_power)
plot(DateTime, Voltage, type="n", xlab="datetime")
lines(DateTime, Voltage)
plot(DateTime, Sub_metering_1, type="n", xlab="", ylab="Energy sub metering", ylim=c(0, 30))
lines(DateTime, Sub_metering_1, col="grey")
lines(DateTime, Sub_metering_2, col="red")
lines(DateTime, Sub_metering_3, col="blue")
legend(bty = "n", cex = 0.65, "topright", lwd="2", col=c("grey","red","blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
plot(DateTime, Global_reactive_power, type="n", xlab="datetime", ylim=c(0.0,0.5))
lines(DateTime, Global_reactive_power)
})
dev.copy(png, file="plot4.png", width = 480, height = 480)
dev.off()
par(mfrow=c(2,2))
with(dataset, {
plot(DateTime, Global_active_power, type="n", xlab="", ylab="Global Active Power")
lines(DateTime, Global_active_power)
plot(DateTime, Voltage, type="n", xlab="datetime")
lines(DateTime, Voltage)
plot(DateTime, Sub_metering_1, type="n", xlab="", ylab="Energy sub metering", ylim=c(0, 30), cex=0.75)
lines(DateTime, Sub_metering_1, col="grey")
lines(DateTime, Sub_metering_2, col="red")
lines(DateTime, Sub_metering_3, col="blue")
legend(bty = "n", cex = 0.65, "topright", lwd="2", col=c("grey","red","blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
plot(DateTime, Global_reactive_power, type="n", xlab="datetime", ylim=c(0.0,0.5), cex=0.75)
lines(DateTime, Global_reactive_power)
})
dev.copy(png, file="plot4.png", width = 480, height = 480)
dev.off()
